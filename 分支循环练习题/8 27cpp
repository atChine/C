//#include <stdio.h>
//#include<string.h>
//
//	const char* str1 = "abcdef";
//	const char* str2 = "bbb";
//	printf("strlen(str1)=%d\n", strlen(str1));
//	printf("strlen(str2)=%d\n", strlen(str2));
//	if (strlen(str2) - strlen(str1) > 0)
//	{
//		printf("str2>str1\n");
//	}
//	else
//	{
//		printf("srt1>str2\n");
//	}
//void bubble_sort(int arr[] ,int sz)
//{
//	
//	for (int i=0; i < sz-1; i++)
//	{
//		//一趟冒泡排序
//		
//		for (int j=0; j <sz-1-i ; j++)
//		{
//			if (arr[j] > arr[j + 1])
//			{
//				int temp = arr[j];
//				arr[j] = arr[j+1];
//				arr[j+1] = temp; 
//			}
//		}
//	}
//}
//struct stu
//{
//	char name[20];
//	int age;
//};
//int main()
//{
//	int arr[10] = { 9,8,7,6,5,4,3,2,1,0 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	struct stu s[3] = { {"张三",20},{"李四",19},{"王五",21} };
//	bubble_sort(arr, sz);//冒泡排序
//	for (int i = 0; i < sz; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	return 0;
//
//}
//
//
//
//
//
//int a[] = { 88, 56, 100, 2, 25 };
//
//int cmpfunc(const void* a, const void* b)
//{
//    return (*(int*)a - *(int*)b);
//}
//
//int main()
//{
//    int n;
//
//    printf("排序之前的列表：\n");
//    for (n = 0; n < 5; n++) {
//        printf("%d ", values[n]);
//    }
//
//    qsort(values, 5, sizeof(int), cmpfunc);
//
//    printf("\n排序之后的列表：\n");
//    for (n = 0; n < 5; n++) {
//        printf("%d ", values[n]);
//    }
//#include <stdio.h>
//#include <stdlib.h>
//#include<string.h>
//int main(){
//    //一维数组
//    int a[] = { 88, 56, 100, 2 };
//    printf("%d\n", sizeof(a));//sizeof(数组名)表示整个数组；――――16
//    printf("%d\n", sizeof(a+1));//a表示首元素地址，(a+1)表示第二个元素―――――4
//    printf("%d\n", sizeof(*a));//a表示首元素地址，*a就是解引用首元素――――4
//    printf("%d\n", sizeof(a[1]));//第二个元素的大小 ---4
//    printf("%d\n", sizeof(&a));//&a取出来的是数组的地址，但数组的地址也是地址，所以是4个字节----4
//    printf("%d\n", sizeof(*&a));//&a取出来的是数组的地址，然后解引用，就是这个数组----16
//    printf("%d\n", sizeof(&a + 1));//&a取出来的是数组的地址,即使是跳过整个数组，地址的大小不会变，始终是---4
//    printf("%d\n", sizeof(&a[0]));//取a[0]的地址，还是---4
//    printf("%d\n", sizeof(&a[0]+1));//表示的是取a[1]的地址，还是----4
//
//
//   //字符数组
//    char arr[] = { 'a','b','c','d','e','f' };
//    printf("%d\n", sizeof(arr));
//    printf("%d\n", sizeof(arr + 0));
//    printf("%d\n", sizeof(*arr));
//    printf("%d\n", sizeof(arr[1]));
//    printf("%d\n", sizeof(&arr));
//    printf("%d\n", sizeof(&arr + 1));
//    printf("%d\n", sizeof(&arr[0] + 1));
//    printf("%d\n", strlen(arr));
//    printf("%d\n", strlen(arr + 0));
//    printf("%d\n", strlen(*arr));
//    printf("%d\n", strlen(arr[1]));
//    printf("%d\n", strlen(&arr));
//    printf("%d\n", strlen(&arr + 1));
//    printf("%d\n", strlen(&arr[0] + 1));
//    char arr[] = "abcdef";
//
//    return 0;
//}
//
//
//#include <stdio.h>
//#include <string.h>
//int main(void)
//{
//    /*字符数组赋初值*/
//    char cArr[] = { 'I','L','O','V','E','C','\0'};
//    /*字符串赋初值*/
//    char sArr[] = "ILOVEC";
//    /*用sizeof（）求长度*/
//    printf("cArr的长度=%d\n", sizeof(cArr));
//    printf("sArr的长度=%d\n", sizeof(sArr));
//    /*用strlen（）求长度*/
//    printf("cArr的长度=%d\n", strlen(cArr));
//    printf("sArr的长度=%d\n", strlen(sArr));
//    /*用printf的%s打印内容*/
//    printf("cArr的内容=%s\n", cArr);
//    printf("sArr的内容=%s\n", sArr);
//    return 0;
//}
//
//#include<stdio.h>
//#include <string.h>
//int main() {
//    char arr[] = "abcdef";
//    
//    printf("%d\n", sizeof(arr));
//    printf("%d\n", sizeof(arr + 0));
//    printf("%d\n", sizeof(*arr));
//    printf("%d\n", sizeof(arr[1]));
//    printf("%d\n", sizeof(&arr));
//    printf("%d\n", sizeof(&arr + 1));
//    printf("%d\n", sizeof(&arr[0] + 1));
//    printf("%d\n", strlen(arr));
//    printf("%d\n", strlen(arr + 0));
//    printf("%d\n", strlen(*arr));
//    printf("%d\n", strlen(arr[1]));
//    printf("%d\n", strlen(&arr));
//    printf("%d\n", strlen(&arr + 1));
//    printf("%d\n", strlen(&arr[0] + 1));
//
//    char* p = "abcdef";
//
//    printf("%d\n", sizeof(p));
//    printf("%d\n", sizeof(p + 1));
//    printf("%d\n", sizeof(*p));
//    printf("%d\n", sizeof(p[0]));
//    printf("%d\n", sizeof(&p));
//    printf("%d\n", sizeof(&p + 1));
//    printf("%d\n", sizeof(&p[0] + 1));
//    printf("%d\n", strlen(p));
//    printf("%d\n", strlen(p + 1));
//    printf("%d\n", strlen(*p));
//    printf("%d\n", strlen(p[0]));
//    printf("%d\n", strlen(&p));
//    printf("%d\n", strlen(&p + 1));
//    printf("%d\n", strlen(&p[0] + 1));
//    //二维数组
//    int a[3][4] = { 0 };
//    printf("%d\n", sizeof(a));
//    printf("%d\n", sizeof(a[0][0]));
//    printf("%d\n", sizeof(a[0]));
//    printf("%d\n", sizeof(a[0] + 1));
//    printf("%d\n", sizeof(*(a[0] + 1)));
//    printf("%d\n", sizeof(a + 1));
//    printf("%d\n", sizeof(*(a + 1)));
//    printf("%d\n", sizeof(&a[0] + 1));
//    printf("%d\n", sizeof(*(&a[0] + 1)));
//    printf("%d\n", sizeof(*a));
//    printf("%d\n", sizeof(a[3]));
//    return 0;
//}
//
//二维数组
//
//#include<stdio.h>
//#include<string.h>
//int main() {
//    int a[3][4] = { 0 };
//    printf("%d\n", sizeof(a)); //--------------------- 4*12=48
//    printf("%d\n", sizeof(a[0][0]));//-----------------4
//    printf("%d\n", sizeof(a[0]));//--------------------4*4=16
//    printf("%d\n", sizeof(a[0] + 1));//----------------4
//    printf("%d\n", sizeof(*(a[0] + 1)));//-------------4
//    printf("%d\n", sizeof(a + 1));//-------------------4
//    printf("%d\n", sizeof(*(a + 1)));//----------------16
//    printf("%d\n", sizeof(&a[0] + 1));//---------------4
//    printf("%d\n", sizeof(*(&a[0] + 1)));//------------16
//    printf("%d\n", sizeof(*a));//----------------------16
//    printf("%d\n", sizeof(a[3]));//--------------------4*4=16
//
//
//    char arr[] = "abcdefg";
//    char arr_1[] = "\0\0\0\0\0\0\0";
//   //printf("%d\n", sizeof(arr));
//    //printf("%d\n", strlen(arr));
//    //printf("%d\n", sizeof(arr_1));
//    printf("%d\n", sizeof(arr + 0));
//
//   const char* p = "abcdef";
//    printf("%d\n", sizeof(p));//4
//    printf("%d\n", sizeof(p + 1));//4
//    printf("%d\n", sizeof(*p));//1
//    printf("%d\n", sizeof(p[0]));//
//    printf("%d\n", sizeof(&p));//4
//    printf("%d\n", sizeof(&p + 1));//4
//    printf("%d\n", sizeof(&p[0] + 1));//4
//    return 0;
//}
//
//
//#include<stdio.h>
//#include<string.h>
//int main()
//{
//    int a[5] = { 1, 2, 3, 4, 5 };
//    int* ptr = (int*)(&a + 1);
//    printf("%d %d", *(a + 1), *(ptr - 1));
//    return 0;
//}
//struct Test
//{
//    int Num;
//    char* pcName;
//    short sDate;
//    char cha[2];
//    short sBa[4];
//}*p;
////假设p 的值为0x100000。 如下表表达式的值分别为多少？
////已知，结构体Test类型的变量大小是20个字节
//int main()
//{
//    printf("%p\n", p + 0x1);
//    printf("%p\n", (unsigned long)p + 0x1);
//    printf("%p\n", (unsigned int*)p + 0x1);
//    return 0;
//}


//有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？
//#include<stdio.h>
//int main() {
//	for (int i = 1; i < 5; i++)
//	{
//		for (int j = 1; j < 5; j++)
//
//		{
//			for (int k = 1; k < 5; k++)
//			{
//				if (i != j && j != k && k != i)
//				{
//					printf("%d%d%d\n", i, j, k);
//				}
//				
//			}
//		}
//	}
//
//	return 0;
//}


//企业发放的奖金根据利润提成。
//利润(I)低于或等于10万元时，奖金可提10% ；
//利润高于10万元，低于20万元时，低于10万元的部分按10% 提成，高于10万元的部分，可提成7.5 % ；
//20万到40万之间时，高于20万元的部分，可提成5 % ；
//40万到60万之间时高于40万元的部分，可提成3 % ；
//60万到100万之间时，高于60万元的部分，可提成1.5 % ；
//高于100万元时，超过100万元的部分按1 % 提成。
//从键盘输入当月利润I，求应发放奖金总数？
#include<stdio.h>
int main()
{
    double i;
    double bonus1, bonus2, bonus4, bonus6, bonus10, bonus;
    printf("你的净利润是：\n");
    scanf("%lf", &i);
    bonus1 = 100000 * 0.1;
    bonus2 = bonus1 + 100000 * 0.075;
    bonus4 = bonus2 + 200000 * 0.05;
    bonus6 = bonus4 + 200000 * 0.03;
    bonus10 = bonus6 + 400000 * 0.015;
    if (i <= 100000) {
        bonus = i * 0.1;
    }
    else if (i <= 200000) {
        bonus = bonus1 + (i - 100000) * 0.075;
    }
    else if (i <= 400000) {
        bonus = bonus2 + (i - 200000) * 0.05;
    }
    else if (i <= 600000) {
        bonus = bonus4 + (i - 400000) * 0.03;
    }
    else if (i <= 1000000) {
        bonus = bonus6 + (i - 600000) * 0.015;
    }
    else if (i > 1000000) {
        bonus = bonus10 + (i - 1000000) * 0.01;
    }
    printf("提成为：bonus=%lf", bonus);

    printf("\n");
    return 0;
}
