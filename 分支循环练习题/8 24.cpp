//#include<stdio.h>
//
//int main()
//
//{
//    char a = 3;
//    //00000000 000000000 00000000 00000011     //3的16进制
//    //00000011 - a   因为a是char类型的,所以a中只能放一个字节
//    char b = 127;
//    //00000000 000000000 00000000 01111111
//    //01111111 - b
//    char c = a + b;
//    //a和b要相加的话首先被提升为普通整型,然后再执行加法运算
//    //a发生整型提升后的结果:   
//    //0 00000000 00000000 00000000 0000011  符号位为0,
//    // 在0后面补全32位来进行提升
//    //b发生整型提升后的结果:   
//    //0 00000000 00000000 00000000 1111111
//    //a+b=00000000 000000000 00000000 00000011 
//    //   +00000000 000000000 00000000 01111111
//    //   =00000000 000000000 00000000 10000010 
//    //所以c=10000010 
//    //因为内存中的数据都是以补码的形式存放在内存中的
//    //且打印的是%d,就是以十进制形式打印,所以这里就会发生整型提升
//    //c进行整型提升 1 11111111 11111111 11111111 0000010 (补码)
//    //因为首位为1,所以符号位为1,在1后面补全32位来进行提升
//    //        反码:1 11111111 11111111 11111111 0000001
//    //        (反码等于补码减1)
//   //         源码:1 00000000 00000000 00000000 1111110 
//   //         (源码=反码的符号位不变,其他位取反)  
//    printf("%d\n", c);  //所以结果为-126  
//    return 0;
//}


#include<stdio.h>
//void test(int arr[10])
//{
//	int sz = 0;
//	sz = sizeof(arr) / sizeof(arr[0]);
//	printf("%d\n", sz);
//}
//int main() {
//	int arr[10] = { 0 };
//	test(arr);
int main(){
	/*char arr[10] = "hello";
	char* p = arr;
	printf("%s\n", arr);*/
	/*const char* p = "abcdef";
	*p = 'W';

	printf("%s\n", p);*/
	/*char arr[] = "hello";
	char arr2[] = "hello";*/
	const char* p = "hello";
	const char* p1 = "hello";
	const char* p2 = "world";
	/*printf("%s\n", arr);
	printf("%s", arr2);*/
	/*if (p==p1)
	{
		printf("haha\n");
	}
	else
	{
		printf("hehe\n");
	}*/
	printf("%d\n", p);
	printf("%c\n", *p1);
	printf("%s\n", p2);
	return 0;
}